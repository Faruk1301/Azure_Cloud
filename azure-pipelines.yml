trigger:
  branches:
    include:
      - main  # Runs the pipeline only on changes to main

pr:
  branches:
    include:
      - main  # Runs validation on pull requests to main

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'

    - script: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt  # Ensures fresh dependencies
      displayName: 'Install Dependencies'

    - script: rm -rf $(Build.ArtifactStagingDirectory)/*
      displayName: "Clean previous artifacts"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'

    - script: |
        echo "Contents of the ZIP file:"
        unzip -l $(Build.ArtifactStagingDirectory)/app.zip  # List contents of the ZIP file
      displayName: 'List ZIP Contents'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
        artifactName: 'drop'

- stage: DeployToDev
  dependsOn: Build
  jobs:
  - job: DeployDevJob
    steps:
    - task: AzureAppServiceManage@0
      inputs:
        azureSubscription: 'MyAzureConnection'
        Action: 'Restart Azure App Service'
        WebAppName: 'my-python-app'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'MyAzureConnection'
        appName: 'my-python-app'
        package: '$(Pipeline.Workspace)/drop/app.zip'
        deploymentMethod: 'runFromPackage'  # Prevents locked file errors

- stage: DeployToStaging
  dependsOn: DeployToDev
  jobs:
  - job: DeployStagingJob
    steps:
    - task: AzureAppServiceManage@0
      inputs:
        azureSubscription: 'MyAzureConnection'
        Action: 'Restart Azure App Service'
        WebAppName: 'my-python-app-staging'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'MyAzureConnection'
        appName: 'my-python-app-staging'
        package: '$(Pipeline.Workspace)/drop/app.zip'
        deploymentMethod: 'runFromPackage'  # Prevents locked file errors

    - script: |
        echo "Checking deployment status..."
        curl -X GET https://my-python-app-staging.azurewebsites.net  # Check if the app is live after deployment
      displayName: 'Verify Deployment'






